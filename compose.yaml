services:
  segment:
    image: ironnicko1413/outfits.ai-segment:latest
    build:
      context: Segment/
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    env_file:
      - ./.env
    networks:
      - outfits-ai-network

  frontend:
    image: ironnicko1413/outfits.ai-frontend:latest
    build:
      context: Frontend/
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      - VITE_PUBLIC_IP=${VITE_PUBLIC_IP}
    ports:
      - "3000:3000"
    networks:
      - outfits-ai-network

  backend:
    image: ironnicko1413/outfits.ai-backend:latest
    build:
      context: Go-Backend/
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      - PRODUCTION=prod
      - ACCESS_KEY=${ACCESS_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - SESSION=${SESSION}
    networks:
      - outfits-ai-network
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    links:
      - postgres

  postgres:
    image: pgvector/pgvector:pg17
    container_name: postgres
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - outfits-ai-network

volumes:
  pgdata:

networks:
  outfits-ai-network:
      driver: bridge